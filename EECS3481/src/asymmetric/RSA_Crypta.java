package asymmetric;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.RSAPrivateKeySpec;

import javax.crypto.Cipher;

public class RSA_Crypta {

	public static void main(String[] args) throws Exception {
		
//		BigInteger n = new BigInteger("94587468335128982981605019776781234618384857805657005686084562260910788622013722070926491690843853690071248130134427832324966728582532832363221542231787068203763027067400082835394459857525017707284768411819006776211493735326500782954621660256501187035611332577696332459049538105669711385995976912007767106063");
//		BigInteger d = new BigInteger("7289370196881601766768920490284861650464951706793000236386405648425161747775298344104658393385359209126267833888223695609366844098655240542152017354442883676634193191857568369042999854440242050353181703706753485749165295123694487676952198090537385200990850805837963871485320168470788328336240930212290450023");
//		BigInteger ct = new BigInteger("87014856975716299121085087309577038316883175412853820115551293556230488405826385706604303724175236985573832006395540199066061101502996745421485579743246846982636317440505885092956723199407403632041108913018671613508572002898008615700858579079601105011909417884801902333329415712320494308682279897714456370814");
		BigInteger n = new BigInteger("5109625347772128860334295501176347537106995877319060213770939748791438796284135235054359817112811366809484484012422701257578561939463668273870105849752437");
		BigInteger d = new BigInteger("3844866598323582112726796614746558542773581056200480952936548721862864836807755886298255283779818885394398572791724624935498047815791148265744101407409517");
		BigInteger ct = new BigInteger("3441589045220011020579403913678781266536977567710422392610603842561251476089361115481255439037463664810431441395450736136513984243173298888615585254710916");
		
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		RSAPrivateKeySpec privSpec = new RSAPrivateKeySpec(n, d);
		PrivateKey priv = keyFactory.generatePrivate(privSpec);
		
		Cipher cipher = Cipher.getInstance("RSA/ECB/NoPadding");
		cipher.init(Cipher.DECRYPT_MODE, priv);
		byte[] pt = cipher.doFinal(ct.toByteArray());
		
		System.out.println(new String(pt).trim());
	}

}
